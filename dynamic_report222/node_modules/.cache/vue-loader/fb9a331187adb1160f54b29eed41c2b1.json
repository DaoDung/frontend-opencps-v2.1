{"remainingRequest":"/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/src/components/Comment.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/src/components/Comment.vue","mtime":1548065605826},{"path":"/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/node_modules/vuetify-loader/lib/loader.js","mtime":499162500000},{"path":"/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// import $ from 'jquery'\nimport toastr from 'toastr'\ntoastr.options = {\n  'closeButton': true,\n  'timeOut': '10000'\n}\nexport default {\n  props: ['classPK', 'className'],\n  data: () => ({\n    usersComment: [\n      // {\n      //   id: 1,\n      //   fullname: 'Trịnh Công Trình',\n      //   email: 'trinhtc@fds.vn.com',\n      //   pictureUrl: 'https://app.viima.com/static/media/user_profiles/user-icon.png'\n      // },\n      // {\n      //   id: 2,\n      //   fullname: 'Thái Hoàng Anh',\n      //   email: 'anhth@fds.vn',\n      //   pictureUrl: 'https://app.viima.com/static/media/user_profiles/user-icon.png'\n      // }\n    ],\n    comment: [],\n    argShowMore: true,\n    //\n    checkOpinion: true,\n    validFileUpload: true,\n    fileTypeAllow: ['png', 'jpg', 'jpeg', 'pdf', 'docx', 'doc', 'xls', 'xlsx', 'txt', 'rtf']\n  }),\n  computed: {\n    loading () {\n      return this.$store.getters.loading\n    },\n    initData () {\n      return this.$store.getters.loadingInitData\n    }\n  },\n  watch: {\n    classPK (val) {\n      var vm = this\n      vm.$store.dispatch('loadUsersComment', val).then(result => {\n        vm.usersComment = result\n        vm.initComment()\n      }).catch(reject => {\n        vm.initComment()\n      })\n    }\n  },\n  created () {\n    // var vm = this\n    // vm.$nextTick(function () {\n    //   vm.$store.dispatch('loadUsersComment', vm.classPK).then(result => {\n    //     vm.usersComment = result\n    //   })\n    // })\n  },\n  mounted () {\n    // var vm = this\n    // if (vm.classPK) {\n    //   vm.$store.dispatch('loadUsersComment', vm.classPK).then(result => {\n    //     vm.usersComment = result\n    //     vm.initComment()\n    //   }).catch(reject => {\n    //     vm.initComment()\n    //   })\n    // }\n  },\n  methods: {\n    runComment () {\n      var vm = this\n      if (vm.classPK) {\n        vm.initComment()\n        // vm.$store.dispatch('loadUsersComment', vm.classPK).then(result => {\n        //   vm.usersComment = result\n        //   vm.initComment()\n        // }).catch(reject => {\n        //   vm.initComment()\n        // })\n      }\n    },\n    validateFile (data) {\n      let vm = this\n      let getFileType = data.file.name ? data.file.name.split('.') : ''\n      let fileType = getFileType ? getFileType[getFileType.length - 1] : ''\n      let fileTypeAllow = vm.fileTypeAllow\n      let fileSizeAllow = 10\n      let fileTypeInput = fileTypeAllow ? fileTypeAllow.filter(function (item) {\n        return item === fileType\n      }) : ''\n      vm.validFileUpload = false\n      if (fileTypeInput && fileTypeInput.length > 0) {\n        if (Number(data.file.size) <= fileSizeAllow * 1048576) {\n          vm.validFileUpload = true\n        } else {\n          toastr.error('Tài liệu tải lên dung lượng tối đa là ' + fileSizeAllow + ' MB')\n          vm.validFileUpload = false\n        }\n      } else {\n        toastr.error('Tài liệu tải lên chỉ chấp nhận các định dạng ' + fileTypeAllow.toString())\n        vm.validFileUpload = false\n      }\n    },\n    initComment: function () {\n      var vm = this\n      window.$('#comments-container-el').comments({\n        profilePictureURL: 'https://png.icons8.com/material/50/000000/guest-male.png',\n        textareaRows: 2,\n        enableAttachments: true,\n        enableHashtags: true,\n        enablePinging: false,\n        postCommentOnEnter: false,\n        forceResponsive: false,\n        readOnly: false,\n        textareaPlaceholderText: 'Thêm bình luận mới',\n        newestText: 'Mới nhất',\n        oldestText: 'Cũ nhất',\n        popularText: 'Phổ biến',\n        attachmentsText: 'Đính kèm',\n        sendText: 'Gửi',\n        replyText: 'Trả lời',\n        editText: 'Sửa',\n        editedText: 'Đã sửa',\n        youText: 'Bạn',\n        saveText: 'Ghi lại',\n        deleteText: 'Xóa',\n        // viewAllRepliesText: 'Xem tất cả câu trả lời',\n        hideRepliesText: 'Ẩn câu trả lời',\n        noCommentsText: 'Không có bình luận nào',\n        noAttachmentsText: 'Không có tệp đính kèm',\n        attachmentDropText: 'Kéo thả tệp đính kèm',\n        fieldMappings: {\n          id: 'commentId',\n          parent: 'parent',\n          userId: 'userId',\n          created: 'createdDate',\n          modified: 'modifiedDate',\n          content: 'content',\n          fileURL: 'fileUrl',\n          fileMimeType: 'fileType',\n          fileName: 'fileName',\n          pings: 'pings',\n          creator: 'userId',\n          fullname: 'fullname',\n          profileURL: 'profileUrl',\n          profilePictureURL: 'pictureUrl',\n          isNew: 'isNew',\n          createdByAdmin: 'isAdmin',\n          createdByCurrentUser: 'createdByCurrentUser',\n          upvoteCount: 'upvoteCount',\n          userHasUpvoted: 'userHasUpvoted',\n          email: 'email',\n          opinion: 'opinion',\n          className: 'className',\n          classPK: 'classPK'\n        },\n        timeFormatter: function (time) {\n          if (time) {\n            let value = new Date(time)\n            value.setHours(value.getHours() - 7)\n            return `${value.getDate().toString().padStart(2, '0')}/${(value.getMonth() + 1).toString().padStart(2, '0')}/${value.getFullYear()} ${value.getHours().toString().padStart(2, '0')}:${value.getMinutes().toString().padStart(2, '0')}`\n          } else {\n            return ''\n          }\n        },\n        getUsers: function (onSuccess, onError) {\n          onSuccess(vm.usersComment)\n        },\n        getComments: function (onSuccess, onError) {\n          var dataGet = {\n            'classPK': vm.classPK,\n            'className': vm.className\n          }\n          let promise = vm.$store.dispatch('loadCommentItems', dataGet)\n          promise.then(result => {\n            var data = []\n            window.$.each(result, function (index, item) {\n              vm.comment = item\n              vm.formatComment(vm.comment)\n              data.push(vm.comment)\n            })\n            onSuccess(data)\n          }).catch(reject => {\n            onSuccess([])\n            onError()\n          })\n        },\n        postComment: function (data, onSuccess, onError) {\n          data.classPK = vm.classPK\n          data.className = vm.className\n          data.opinion = document.getElementById('opinion').checked\n          vm.$store.dispatch('postComment', data).then(result => {\n            if (result.opinion) {\n              window.$('.opinion').hide()\n            }\n            document.getElementById('opinion').checked = false\n            vm.comment = result\n            vm.formatComment(vm.comment)\n            onSuccess(vm.comment)\n          })\n        },\n        putComment: function (data, onSuccess, onError) {\n          data.classPK = vm.classPK\n          data.className = vm.className\n          vm.$store.dispatch('putComment', data).then(result => {\n            vm.comment = result\n            vm.formatComment(vm.comment)\n            onSuccess(vm.comment)\n          })\n        },\n        deleteComment: function (data, onSuccess, onError) {\n          data.classPK = vm.classPK\n          data.className = vm.className\n          vm.$store.dispatch('deleteComment', data).then(result => {\n            onSuccess()\n          }).catch(reject => {\n            onError()\n            console.log(reject)\n          })\n        },\n        upvoteComment: function (data, onSuccess, onError) {\n          data.classPK = vm.classPK\n          data.className = vm.className\n          vm.$store.dispatch('upvoteComment', data).then(result => {\n            vm.comment = result\n            vm.formatComment(vm.comment)\n            onSuccess(vm.comment)\n          }).catch(reject => {\n            console.log(reject)\n          })\n        },\n        uploadAttachments: function (comments, onSuccess, onError) {\n          var responses = 0\n          var successfulUploads = []\n          var serverResponded = function () {\n            responses++\n            if (responses === comments.length) {\n              if (successfulUploads.length === 0) {\n                onError()\n              } else {\n                onSuccess(successfulUploads)\n              }\n            }\n          }\n          window.$(comments).each(function (index, comment) {\n            var formData = new FormData()\n            window.$(Object.keys(comment)).each(function (index, key) {\n              var value = comment[key]\n              if (value) {\n                formData.append(key, value)\n              }\n            })\n            formData.append('file', comment.file)\n            formData.append('className', vm.className)\n            formData.append('classPK', vm.classPK)\n            formData.append('parent', comment.parent != null ? comment.parent : 0)\n            formData.append('fileName', comment.file.name)\n            formData.append('fileType', comment.file.type)\n            formData.append('fileSize', comment.file.size)\n            formData.append('pings', comment.pings.join())\n            formData.append('opinion', document.getElementById('opinion').checked)\n            // formData.append('email', 'congtrinh0209@gmail.com')\n            // formData.append('fullname', 'Công Trình')\n            formData.append('email', '')\n            formData.append('fullname', vm.initData.user.userName)\n            formData.append('opinion', document.getElementById('opinion').checked)\n            let fileUpload = {\n              file: comment.file\n            }\n            vm.validateFile(fileUpload)\n            if (vm.validFileUpload) {\n              window.$.ajax({\n                url: vm.initData.commentApi + '/uploads',\n                dataType: 'json',\n                type: 'POST',\n                headers: {\n                  'groupId': vm.initData.groupId\n                  // 'groupId': 55301\n                },\n                data: formData,\n                cache: false,\n                contentType: false,\n                processData: false,\n                success: function (comment) {\n                  if (comment.opinion) {\n                    window.$('.opinion').hide()\n                  }\n                  document.getElementById('opinion').checked = false\n                  vm.formatComment(comment)\n                  successfulUploads.push(vm.comment)\n                  serverResponded()\n                  if (comment.opinion) {\n                    window.$('.opinion').hide()\n                  }\n                  document.getElementById('opinion').checked = false\n                },\n                error: function (xhr, data) {\n                  serverResponded()\n                }\n              })\n            } else {\n              serverResponded()\n            }\n          })\n        }\n        // appendNewComments: function (commentJSONs, onSuccess, onError) {\n        //   const config = {\n        //     headers: {\n        //       'groupId': vm.group_id\n        //     }\n        //   }\n        //   let commentById = {}\n        //   let oldCommentsId = commentJSONs.map(function (c) {\n        //     commentById[c.id] = c.id + '' + c.userHasUpvoted + '' + c.upvoteCount + '' + c.content\n        //     return c.id\n        //   })\n        //   let url = vm.initData.commentApi + '/org.opencps.dossiermgt.model.Dossier/' + vm.classPK + '?start=0&end=10&sort=modified_Number&order=true'\n        //   axios.get(url, config).then(function (response) {\n        //     let data = []\n        //     let dataEdited = []\n        //     if (response.hasOwnProperty('data')) {\n        //       var serializable = response.data.data\n        //       let curId = 0\n        //       let code = ''\n        //       for (var key in serializable) {\n        //         vm.comment = serializable[key]\n        //         curId = vm.comment['commentId']\n        //         code = vm.comment['commentId'] + '' + vm.comment['userHasUpvoted'] + '' + vm.comment['upvoteCount'] + '' + vm.comment['content']\n        //         vm.formatComment(vm.comment)\n        //         /* check return if not exist */\n        //         if (oldCommentsId.indexOf(curId) === -1) {\n        //           data.push(vm.comment)\n        //         } else if (code !== commentById[curId]) {\n        //           /* if have changed */\n        //           dataEdited.push(vm.comment)\n        //         }\n        //       }\n        //       onSuccess(data, dataEdited)\n        //     }\n        //   })\n        //   .catch(function (error) {\n        //     console.log(error)\n        //   })\n        // }\n      })\n    },\n    formatComment: function (comment) {\n      var vm = this\n      vm.comment = comment\n      if (comment.parent === 0) {\n        vm.comment.parent = null\n      }\n      if (comment.fileName === '') {\n        vm.comment.fileName = null\n      }\n      if (comment.fileType === '') {\n        vm.comment.fileType = null\n      }\n      if (comment.fileUrl === '') {\n        vm.comment.fileUrl = null\n      }\n      if (comment.pictureUrl === '') {\n        vm.comment.pictureUrl = 'https://png.icons8.com/material/50/000000/guest-male.png'\n      }\n      vm.comment.fullname = comment.fullname\n      vm.comment.opinion = comment.opinion\n      vm.comment.pings = comment.pings.toString().split(',')\n      vm.comment.createdDate = vm.comment.createDate\n      vm.comment.modifiedDate = vm.comment.modifiedDate\n    },\n    dateTimeView (arg) {\n      if (arg) {\n        let value = new Date(arg)\n        return `${value.getDate().toString().padStart(2, '0')}/${(value.getMonth() + 1).toString().padStart(2, '0')}/${value.getFullYear()} ${value.getHours().toString().padStart(2, '0')}:${value.getMinutes().toString().padStart(2, '0')}`\n      } else {\n        return ''\n      }\n    }\n  },\n  filters: {\n    dateTimeView (arg) {\n      if (arg) {\n        let value = new Date(arg)\n        return `${value.getDate().toString().padStart(2, '0')}/${(value.getMonth() + 1).toString().padStart(2, '0')}/${value.getFullYear()}  ${value.getHours().toString().padStart(2, '0')}:${value.getMinutes().toString().padStart(2, '0')}`\n      } else {\n        return ''\n      }\n    }\n  }\n}\n",{"version":3,"sources":["Comment.vue"],"names":[],"mappingsfile":"Comment.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"comment-temp\">\n    <!-- Component Trao đổi thảo luận -->\n    <div>\n      <v-expansion-panel :value=\"[true]\" expand class=\"expansion-pl-transparent\">\n        <v-expansion-panel-content>\n          <!-- <div slot=\"header\">\n            <div class=\"background-triangle-small\"> \n              <v-icon size=\"18\" color=\"white\">star_rate</v-icon> \n            </div>\n            TRAO ĐỔI THÔNG TIN\n          </div> -->\n          \n          <v-card class=\"comments__container\" >\n            <v-card-text class=\"pl-4\">\n              <div id=\"comments-container-el\"></div>\n              \n              <!-- <v-flex v-if=\"argShowMore2\"><span class=\"action-show primary--text mx-2 my-2\" @click=\"showMore2\">Xem thêm</span></v-flex>\n              <v-flex v-if=\"!argShowMore2\"><span class=\"action-show primary--text mx-2 my-2\" @click=\"showMore2\">Rút gọn</span></v-flex> -->\n            </v-card-text>\n          </v-card>\n        </v-expansion-panel-content>\n      </v-expansion-panel>\n    </div>\n  </div>\n</template>\n\n<script>\n// import $ from 'jquery'\nimport toastr from 'toastr'\ntoastr.options = {\n  'closeButton': true,\n  'timeOut': '10000'\n}\nexport default {\n  props: ['classPK', 'className'],\n  data: () => ({\n    usersComment: [\n      // {\n      //   id: 1,\n      //   fullname: 'Trịnh Công Trình',\n      //   email: 'trinhtc@fds.vn.com',\n      //   pictureUrl: 'https://app.viima.com/static/media/user_profiles/user-icon.png'\n      // },\n      // {\n      //   id: 2,\n      //   fullname: 'Thái Hoàng Anh',\n      //   email: 'anhth@fds.vn',\n      //   pictureUrl: 'https://app.viima.com/static/media/user_profiles/user-icon.png'\n      // }\n    ],\n    comment: [],\n    argShowMore: true,\n    //\n    checkOpinion: true,\n    validFileUpload: true,\n    fileTypeAllow: ['png', 'jpg', 'jpeg', 'pdf', 'docx', 'doc', 'xls', 'xlsx', 'txt', 'rtf']\n  }),\n  computed: {\n    loading () {\n      return this.$store.getters.loading\n    },\n    initData () {\n      return this.$store.getters.loadingInitData\n    }\n  },\n  watch: {\n    classPK (val) {\n      var vm = this\n      vm.$store.dispatch('loadUsersComment', val).then(result => {\n        vm.usersComment = result\n        vm.initComment()\n      }).catch(reject => {\n        vm.initComment()\n      })\n    }\n  },\n  created () {\n    // var vm = this\n    // vm.$nextTick(function () {\n    //   vm.$store.dispatch('loadUsersComment', vm.classPK).then(result => {\n    //     vm.usersComment = result\n    //   })\n    // })\n  },\n  mounted () {\n    // var vm = this\n    // if (vm.classPK) {\n    //   vm.$store.dispatch('loadUsersComment', vm.classPK).then(result => {\n    //     vm.usersComment = result\n    //     vm.initComment()\n    //   }).catch(reject => {\n    //     vm.initComment()\n    //   })\n    // }\n  },\n  methods: {\n    runComment () {\n      var vm = this\n      if (vm.classPK) {\n        vm.initComment()\n        // vm.$store.dispatch('loadUsersComment', vm.classPK).then(result => {\n        //   vm.usersComment = result\n        //   vm.initComment()\n        // }).catch(reject => {\n        //   vm.initComment()\n        // })\n      }\n    },\n    validateFile (data) {\n      let vm = this\n      let getFileType = data.file.name ? data.file.name.split('.') : ''\n      let fileType = getFileType ? getFileType[getFileType.length - 1] : ''\n      let fileTypeAllow = vm.fileTypeAllow\n      let fileSizeAllow = 10\n      let fileTypeInput = fileTypeAllow ? fileTypeAllow.filter(function (item) {\n        return item === fileType\n      }) : ''\n      vm.validFileUpload = false\n      if (fileTypeInput && fileTypeInput.length > 0) {\n        if (Number(data.file.size) <= fileSizeAllow * 1048576) {\n          vm.validFileUpload = true\n        } else {\n          toastr.error('Tài liệu tải lên dung lượng tối đa là ' + fileSizeAllow + ' MB')\n          vm.validFileUpload = false\n        }\n      } else {\n        toastr.error('Tài liệu tải lên chỉ chấp nhận các định dạng ' + fileTypeAllow.toString())\n        vm.validFileUpload = false\n      }\n    },\n    initComment: function () {\n      var vm = this\n      window.$('#comments-container-el').comments({\n        profilePictureURL: 'https://png.icons8.com/material/50/000000/guest-male.png',\n        textareaRows: 2,\n        enableAttachments: true,\n        enableHashtags: true,\n        enablePinging: false,\n        postCommentOnEnter: false,\n        forceResponsive: false,\n        readOnly: false,\n        textareaPlaceholderText: 'Thêm bình luận mới',\n        newestText: 'Mới nhất',\n        oldestText: 'Cũ nhất',\n        popularText: 'Phổ biến',\n        attachmentsText: 'Đính kèm',\n        sendText: 'Gửi',\n        replyText: 'Trả lời',\n        editText: 'Sửa',\n        editedText: 'Đã sửa',\n        youText: 'Bạn',\n        saveText: 'Ghi lại',\n        deleteText: 'Xóa',\n        // viewAllRepliesText: 'Xem tất cả câu trả lời',\n        hideRepliesText: 'Ẩn câu trả lời',\n        noCommentsText: 'Không có bình luận nào',\n        noAttachmentsText: 'Không có tệp đính kèm',\n        attachmentDropText: 'Kéo thả tệp đính kèm',\n        fieldMappings: {\n          id: 'commentId',\n          parent: 'parent',\n          userId: 'userId',\n          created: 'createdDate',\n          modified: 'modifiedDate',\n          content: 'content',\n          fileURL: 'fileUrl',\n          fileMimeType: 'fileType',\n          fileName: 'fileName',\n          pings: 'pings',\n          creator: 'userId',\n          fullname: 'fullname',\n          profileURL: 'profileUrl',\n          profilePictureURL: 'pictureUrl',\n          isNew: 'isNew',\n          createdByAdmin: 'isAdmin',\n          createdByCurrentUser: 'createdByCurrentUser',\n          upvoteCount: 'upvoteCount',\n          userHasUpvoted: 'userHasUpvoted',\n          email: 'email',\n          opinion: 'opinion',\n          className: 'className',\n          classPK: 'classPK'\n        },\n        timeFormatter: function (time) {\n          if (time) {\n            let value = new Date(time)\n            value.setHours(value.getHours() - 7)\n            return `${value.getDate().toString().padStart(2, '0')}/${(value.getMonth() + 1).toString().padStart(2, '0')}/${value.getFullYear()} ${value.getHours().toString().padStart(2, '0')}:${value.getMinutes().toString().padStart(2, '0')}`\n          } else {\n            return ''\n          }\n        },\n        getUsers: function (onSuccess, onError) {\n          onSuccess(vm.usersComment)\n        },\n        getComments: function (onSuccess, onError) {\n          var dataGet = {\n            'classPK': vm.classPK,\n            'className': vm.className\n          }\n          let promise = vm.$store.dispatch('loadCommentItems', dataGet)\n          promise.then(result => {\n            var data = []\n            window.$.each(result, function (index, item) {\n              vm.comment = item\n              vm.formatComment(vm.comment)\n              data.push(vm.comment)\n            })\n            onSuccess(data)\n          }).catch(reject => {\n            onSuccess([])\n            onError()\n          })\n        },\n        postComment: function (data, onSuccess, onError) {\n          data.classPK = vm.classPK\n          data.className = vm.className\n          data.opinion = document.getElementById('opinion').checked\n          vm.$store.dispatch('postComment', data).then(result => {\n            if (result.opinion) {\n              window.$('.opinion').hide()\n            }\n            document.getElementById('opinion').checked = false\n            vm.comment = result\n            vm.formatComment(vm.comment)\n            onSuccess(vm.comment)\n          })\n        },\n        putComment: function (data, onSuccess, onError) {\n          data.classPK = vm.classPK\n          data.className = vm.className\n          vm.$store.dispatch('putComment', data).then(result => {\n            vm.comment = result\n            vm.formatComment(vm.comment)\n            onSuccess(vm.comment)\n          })\n        },\n        deleteComment: function (data, onSuccess, onError) {\n          data.classPK = vm.classPK\n          data.className = vm.className\n          vm.$store.dispatch('deleteComment', data).then(result => {\n            onSuccess()\n          }).catch(reject => {\n            onError()\n            console.log(reject)\n          })\n        },\n        upvoteComment: function (data, onSuccess, onError) {\n          data.classPK = vm.classPK\n          data.className = vm.className\n          vm.$store.dispatch('upvoteComment', data).then(result => {\n            vm.comment = result\n            vm.formatComment(vm.comment)\n            onSuccess(vm.comment)\n          }).catch(reject => {\n            console.log(reject)\n          })\n        },\n        uploadAttachments: function (comments, onSuccess, onError) {\n          var responses = 0\n          var successfulUploads = []\n          var serverResponded = function () {\n            responses++\n            if (responses === comments.length) {\n              if (successfulUploads.length === 0) {\n                onError()\n              } else {\n                onSuccess(successfulUploads)\n              }\n            }\n          }\n          window.$(comments).each(function (index, comment) {\n            var formData = new FormData()\n            window.$(Object.keys(comment)).each(function (index, key) {\n              var value = comment[key]\n              if (value) {\n                formData.append(key, value)\n              }\n            })\n            formData.append('file', comment.file)\n            formData.append('className', vm.className)\n            formData.append('classPK', vm.classPK)\n            formData.append('parent', comment.parent != null ? comment.parent : 0)\n            formData.append('fileName', comment.file.name)\n            formData.append('fileType', comment.file.type)\n            formData.append('fileSize', comment.file.size)\n            formData.append('pings', comment.pings.join())\n            formData.append('opinion', document.getElementById('opinion').checked)\n            // formData.append('email', 'congtrinh0209@gmail.com')\n            // formData.append('fullname', 'Công Trình')\n            formData.append('email', '')\n            formData.append('fullname', vm.initData.user.userName)\n            formData.append('opinion', document.getElementById('opinion').checked)\n            let fileUpload = {\n              file: comment.file\n            }\n            vm.validateFile(fileUpload)\n            if (vm.validFileUpload) {\n              window.$.ajax({\n                url: vm.initData.commentApi + '/uploads',\n                dataType: 'json',\n                type: 'POST',\n                headers: {\n                  'groupId': vm.initData.groupId\n                  // 'groupId': 55301\n                },\n                data: formData,\n                cache: false,\n                contentType: false,\n                processData: false,\n                success: function (comment) {\n                  if (comment.opinion) {\n                    window.$('.opinion').hide()\n                  }\n                  document.getElementById('opinion').checked = false\n                  vm.formatComment(comment)\n                  successfulUploads.push(vm.comment)\n                  serverResponded()\n                  if (comment.opinion) {\n                    window.$('.opinion').hide()\n                  }\n                  document.getElementById('opinion').checked = false\n                },\n                error: function (xhr, data) {\n                  serverResponded()\n                }\n              })\n            } else {\n              serverResponded()\n            }\n          })\n        }\n        // appendNewComments: function (commentJSONs, onSuccess, onError) {\n        //   const config = {\n        //     headers: {\n        //       'groupId': vm.group_id\n        //     }\n        //   }\n        //   let commentById = {}\n        //   let oldCommentsId = commentJSONs.map(function (c) {\n        //     commentById[c.id] = c.id + '' + c.userHasUpvoted + '' + c.upvoteCount + '' + c.content\n        //     return c.id\n        //   })\n        //   let url = vm.initData.commentApi + '/org.opencps.dossiermgt.model.Dossier/' + vm.classPK + '?start=0&end=10&sort=modified_Number&order=true'\n        //   axios.get(url, config).then(function (response) {\n        //     let data = []\n        //     let dataEdited = []\n        //     if (response.hasOwnProperty('data')) {\n        //       var serializable = response.data.data\n        //       let curId = 0\n        //       let code = ''\n        //       for (var key in serializable) {\n        //         vm.comment = serializable[key]\n        //         curId = vm.comment['commentId']\n        //         code = vm.comment['commentId'] + '' + vm.comment['userHasUpvoted'] + '' + vm.comment['upvoteCount'] + '' + vm.comment['content']\n        //         vm.formatComment(vm.comment)\n        //         /* check return if not exist */\n        //         if (oldCommentsId.indexOf(curId) === -1) {\n        //           data.push(vm.comment)\n        //         } else if (code !== commentById[curId]) {\n        //           /* if have changed */\n        //           dataEdited.push(vm.comment)\n        //         }\n        //       }\n        //       onSuccess(data, dataEdited)\n        //     }\n        //   })\n        //   .catch(function (error) {\n        //     console.log(error)\n        //   })\n        // }\n      })\n    },\n    formatComment: function (comment) {\n      var vm = this\n      vm.comment = comment\n      if (comment.parent === 0) {\n        vm.comment.parent = null\n      }\n      if (comment.fileName === '') {\n        vm.comment.fileName = null\n      }\n      if (comment.fileType === '') {\n        vm.comment.fileType = null\n      }\n      if (comment.fileUrl === '') {\n        vm.comment.fileUrl = null\n      }\n      if (comment.pictureUrl === '') {\n        vm.comment.pictureUrl = 'https://png.icons8.com/material/50/000000/guest-male.png'\n      }\n      vm.comment.fullname = comment.fullname\n      vm.comment.opinion = comment.opinion\n      vm.comment.pings = comment.pings.toString().split(',')\n      vm.comment.createdDate = vm.comment.createDate\n      vm.comment.modifiedDate = vm.comment.modifiedDate\n    },\n    dateTimeView (arg) {\n      if (arg) {\n        let value = new Date(arg)\n        return `${value.getDate().toString().padStart(2, '0')}/${(value.getMonth() + 1).toString().padStart(2, '0')}/${value.getFullYear()} ${value.getHours().toString().padStart(2, '0')}:${value.getMinutes().toString().padStart(2, '0')}`\n      } else {\n        return ''\n      }\n    }\n  },\n  filters: {\n    dateTimeView (arg) {\n      if (arg) {\n        let value = new Date(arg)\n        return `${value.getDate().toString().padStart(2, '0')}/${(value.getMonth() + 1).toString().padStart(2, '0')}/${value.getFullYear()}  ${value.getHours().toString().padStart(2, '0')}:${value.getMinutes().toString().padStart(2, '0')}`\n      } else {\n        return ''\n      }\n    }\n  }\n}\n</script>\n"]}]}
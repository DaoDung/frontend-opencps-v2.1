{"remainingRequest":"/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/src/components/screens/DatetimePicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/src/components/screens/DatetimePicker.vue","mtime":1548055809985},{"path":"/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/node_modules/vuetify-loader/lib/loader.js","mtime":499162500000},{"path":"/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  data () {\n    return {\n      toDateFormatted: null,\n      toDate: null,\n      rawDate: null,\n      maxDate: '',\n      minDate: '',\n      rules: {\n          required: value => !!value || 'Bắt buộc phải nhập.',\n          number: value => {\n              const pattern = /^\\d+$/\n              return pattern.test(value) || 'Bắt buộc phải nhập kiểu số.'\n          },\n          email: value => {\n              const pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n              return pattern.test(value) || 'Sai định dạng thư điện tử.'\n          }\n      }\n    }\n  },\n  props: ['value', 'item', 'dataValue', 'dataAll'],\n  created () {\n      var vm = this\n      vm.$nextTick(function () {\n          console.log('input data: ', vm.dataValue)\n          vm.rawDate = vm.parseDate(vm.dataValue)\n          if (vm.item.hasOwnProperty('before')) {\n              let dataMax = vm.dataAll[vm.item['before']]\n              let dataMaxConvert = vm.parseDate(dataMax)\n              console.log('dataMax: ', dataMaxConvert)\n              vm.maxDate = dataMaxConvert\n          }\n          if (vm.item.hasOwnProperty('after')) {\n              let dataMin = vm.dataAll[vm.item['after']]\n              let dataMinConvert = vm.parseDate(dataMin)\n              console.log('dataMinConvert: ', dataMinConvert)\n              vm.minDate = dataMinConvert\n          }\n      })\n  },\n  watch: {\n      toDate (val) {\n          let vm = this\n          vm.toDateFormatted = vm.formatDate(val)\n          vm.rawDate = vm.parseDate(vm.toDateFormatted)\n          vm.$emit('input', new Date(val).getTime())\n          vm.$emit('change', new Date(val).getTime())\n          // vm.$parent.reloadPicker()\n      }\n  },\n  methods: {\n      formatDate (date) {\n          if (!date) return null\n          let dateObj = new Date(date)\n          // this.$emit('input', dateObj.getTime())\n          return dateObj.getDate() + '/' + (dateObj.getMonth() + 1) + '/' + dateObj.getFullYear()\n      },\n      parseDate (date) {\n          if (!date) return null\n          const [day, month, year] = date.split('/')\n          return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`\n      },\n      processRules (rulesStr) {\n          return eval('( ' + rulesStr + ' )')\n      }\n  }\n}\n",{"version":3,"sources":["DatetimePicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DatetimePicker.vue","sourceRoot":"src/components/screens","sourcesContent":["<template>\n    <v-menu\n        :close-on-content-click=\"true\"\n        lazy\n        transition=\"fade-transition\"\n        offset-y\n        full-width\n        max-width=\"290px\"\n        min-width=\"290px\"\n    >\n        <v-text-field\n            slot=\"activator\"\n            append-icon=\"event\"\n            @blur=\"toDate = parseDate(toDateFormatted)\"\n            :value=\"formatDate(rawDate)\"\n            :rules=\"[rules.required]\"\n        >\n            <template slot=\"label\">{{item['label']}} <span v-if=\"item.required\" class=\"red--text darken-3\">*</span></template>\n        </v-text-field>\n        <v-date-picker :max=\"maxDate\" :min=\"minDate\" v-model=\"toDate\" no-title></v-date-picker>\n    </v-menu>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        toDateFormatted: null,\n        toDate: null,\n        rawDate: null,\n        maxDate: '',\n        minDate: '',\n        rules: {\n            required: value => !!value || 'Bắt buộc phải nhập.',\n            number: value => {\n                const pattern = /^\\d+$/\n                return pattern.test(value) || 'Bắt buộc phải nhập kiểu số.'\n            },\n            email: value => {\n                const pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                return pattern.test(value) || 'Sai định dạng thư điện tử.'\n            }\n        }\n      }\n    },\n    props: ['value', 'item', 'dataValue', 'dataAll'],\n    created () {\n        var vm = this\n        vm.$nextTick(function () {\n            console.log('input data: ', vm.dataValue)\n            vm.rawDate = vm.parseDate(vm.dataValue)\n            if (vm.item.hasOwnProperty('before')) {\n                let dataMax = vm.dataAll[vm.item['before']]\n                let dataMaxConvert = vm.parseDate(dataMax)\n                console.log('dataMax: ', dataMaxConvert)\n                vm.maxDate = dataMaxConvert\n            }\n            if (vm.item.hasOwnProperty('after')) {\n                let dataMin = vm.dataAll[vm.item['after']]\n                let dataMinConvert = vm.parseDate(dataMin)\n                console.log('dataMinConvert: ', dataMinConvert)\n                vm.minDate = dataMinConvert\n            }\n        })\n    },\n    watch: {\n        toDate (val) {\n            let vm = this\n            vm.toDateFormatted = vm.formatDate(val)\n            vm.rawDate = vm.parseDate(vm.toDateFormatted)\n            vm.$emit('input', new Date(val).getTime())\n            vm.$emit('change', new Date(val).getTime())\n            // vm.$parent.reloadPicker()\n        }\n    },\n    methods: {\n        formatDate (date) {\n            if (!date) return null\n            let dateObj = new Date(date)\n            // this.$emit('input', dateObj.getTime())\n            return dateObj.getDate() + '/' + (dateObj.getMonth() + 1) + '/' + dateObj.getFullYear()\n        },\n        parseDate (date) {\n            if (!date) return null\n            const [day, month, year] = date.split('/')\n            return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`\n        },\n        processRules (rulesStr) {\n            return eval('( ' + rulesStr + ' )')\n        }\n    }\n  }\n</script>\n"]}]}
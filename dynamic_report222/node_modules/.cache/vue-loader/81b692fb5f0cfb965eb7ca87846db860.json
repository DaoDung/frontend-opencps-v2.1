{"remainingRequest":"/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/src/components/toggleButton.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/src/components/toggleButton.vue","mtime":1548065605826},{"path":"/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/node_modules/vuetify-loader/lib/loader.js","mtime":499162500000},{"path":"/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/binhthgc/Documents/fds/github/frontend-opencps-v2.1/dynamic_report/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nconst constants = {\n  colorChecked: '#75C791',\n  colorUnchecked: '#bfcbd9',\n  cssColors: false,\n  labelChecked: 'on',\n  labelUnchecked: 'off',\n  width: 50,\n  height: 22,\n  margin: 3\n}\n\nconst contains = (object, title) => {\n  return typeof object === 'object' && object.hasOwnProperty(title)\n}\n\nconst px = v => v + 'px'\n\nexport default {\n  name: 'toggle-button',\n  props: {\n    title_checked: '',\n    title_unchecked: '',\n    value: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    sync: {\n      type: Boolean,\n      default: false\n    },\n    speed: {\n      type: Number,\n      default: 300\n    },\n    color: {\n      type: [String, Object],\n      validator (value) {\n        return typeof value === 'object'\n          ? value.checked || value.unchecked\n          : typeof value === 'string'\n      }\n    },\n    cssColors: {\n      type: Boolean,\n      default: false\n    },\n    labels: {\n      type: [Boolean, Object],\n      default: false,\n      validator (value) {\n        return typeof value === 'object'\n          ? value.checked || value.unchecked\n          : typeof value === 'boolean'\n      }\n    },\n    height: {\n      type: Number,\n      default: constants.height\n    },\n    width: {\n      type: Number,\n      default: constants.width\n    }\n  },\n  computed: {\n    className () {\n      let { toggled, disabled } = this\n      return ['vue-js-switch', { toggled, disabled }]\n    },\n\n    ariaChecked () {\n      return this.toggled.toString()\n    },\n    coreStyle () {\n      return {\n        width: px(this.width),\n        height: px(this.height),\n        backgroundColor: this.cssColors ? null : this.colorCurrent,\n        borderRadius: px(Math.round(this.height / 2))\n      }\n    },\n    maxWidth () {\n      return {\n        width: px(this.width) + '!important'\n      }\n    },\n    buttonRadius () {\n      return this.height - constants.margin * 2\n    },\n    distance () {\n      return px(this.width - this.height + constants.margin)\n    },\n    buttonStyle () {\n      return {\n        width: px(this.buttonRadius),\n        height: px(this.buttonRadius),\n        transition: `transform ${this.speed}ms`,\n        transform: this.toggled\n          ? `translate3d(${this.distance}, 3px, 0px)`\n          : null\n      }\n    },\n    labelStyle () {\n      return {\n        lineHeight: px(this.height)\n      }\n    },\n    colorChecked () {\n      let { color } = this\n      if (typeof color !== 'object') {\n        return color || constants.colorChecked\n      }\n      return contains(color, 'checked')\n        ? color.checked\n        : constants.colorChecked\n    },\n    colorUnchecked () {\n      let { color } = this\n      return contains(color, 'unchecked')\n        ? color.unchecked\n        : constants.colorUnchecked\n    },\n    colorCurrent () {\n      return this.toggled ? this.colorChecked : this.colorUnchecked\n    },\n    labelChecked () {\n      return contains(this.labels, 'checked')\n        ? this.labels.checked\n        : constants.labelChecked\n    },\n    labelUnchecked () {\n      return contains(this.labels, 'unchecked')\n        ? this.labels.unchecked\n        : constants.labelUnchecked\n    }\n  },\n  watch: {\n    value (value) {\n      if (this.sync) {\n        this.toggled = !!value\n      }\n    }\n  },\n  data () {\n    return {\n      toggled: !!this.value\n    }\n  },\n  methods: {\n    toggle (event) {\n      this.toggled = !this.toggled\n      this.$emit('input', this.toggled)\n      this.$emit('change', {\n        value: this.toggled,\n        srcEvent: event\n      })\n    }\n  }\n}\n",{"version":3,"sources":["toggleButton.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"toggleButton.vue","sourceRoot":"src/components","sourcesContent":["\n<template>\n  <label role='checkbox'\n  :title='toggled?title_checked:title_unchecked'\n  :style='maxWidth'\n  :class='className'\n  :aria-checked='ariaChecked'>\n    <input type='checkbox'\n    class='v-switch-input'\n    @change.stop='toggle'>\n    <div class='v-switch-core'\n    :style='coreStyle'>\n      <div class='v-switch-button'\n      :style='buttonStyle'/>\n    </div>\n    <template v-if='labels'>\n      <span class='v-switch-label v-left'\n      :style='labelStyle'\n      v-if='toggled'\n      v-html='labelChecked'/>\n      <span class='v-switch-label v-right'\n      :style='labelStyle'\n      v-else\n      v-html='labelUnchecked'/>\n    </template>\n  </label>\n</template>\n<script>\nconst constants = {\n  colorChecked: '#75C791',\n  colorUnchecked: '#bfcbd9',\n  cssColors: false,\n  labelChecked: 'on',\n  labelUnchecked: 'off',\n  width: 50,\n  height: 22,\n  margin: 3\n}\n\nconst contains = (object, title) => {\n  return typeof object === 'object' && object.hasOwnProperty(title)\n}\n\nconst px = v => v + 'px'\n\nexport default {\n  name: 'toggle-button',\n  props: {\n    title_checked: '',\n    title_unchecked: '',\n    value: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    sync: {\n      type: Boolean,\n      default: false\n    },\n    speed: {\n      type: Number,\n      default: 300\n    },\n    color: {\n      type: [String, Object],\n      validator (value) {\n        return typeof value === 'object'\n          ? value.checked || value.unchecked\n          : typeof value === 'string'\n      }\n    },\n    cssColors: {\n      type: Boolean,\n      default: false\n    },\n    labels: {\n      type: [Boolean, Object],\n      default: false,\n      validator (value) {\n        return typeof value === 'object'\n          ? value.checked || value.unchecked\n          : typeof value === 'boolean'\n      }\n    },\n    height: {\n      type: Number,\n      default: constants.height\n    },\n    width: {\n      type: Number,\n      default: constants.width\n    }\n  },\n  computed: {\n    className () {\n      let { toggled, disabled } = this\n      return ['vue-js-switch', { toggled, disabled }]\n    },\n\n    ariaChecked () {\n      return this.toggled.toString()\n    },\n    coreStyle () {\n      return {\n        width: px(this.width),\n        height: px(this.height),\n        backgroundColor: this.cssColors ? null : this.colorCurrent,\n        borderRadius: px(Math.round(this.height / 2))\n      }\n    },\n    maxWidth () {\n      return {\n        width: px(this.width) + '!important'\n      }\n    },\n    buttonRadius () {\n      return this.height - constants.margin * 2\n    },\n    distance () {\n      return px(this.width - this.height + constants.margin)\n    },\n    buttonStyle () {\n      return {\n        width: px(this.buttonRadius),\n        height: px(this.buttonRadius),\n        transition: `transform ${this.speed}ms`,\n        transform: this.toggled\n          ? `translate3d(${this.distance}, 3px, 0px)`\n          : null\n      }\n    },\n    labelStyle () {\n      return {\n        lineHeight: px(this.height)\n      }\n    },\n    colorChecked () {\n      let { color } = this\n      if (typeof color !== 'object') {\n        return color || constants.colorChecked\n      }\n      return contains(color, 'checked')\n        ? color.checked\n        : constants.colorChecked\n    },\n    colorUnchecked () {\n      let { color } = this\n      return contains(color, 'unchecked')\n        ? color.unchecked\n        : constants.colorUnchecked\n    },\n    colorCurrent () {\n      return this.toggled ? this.colorChecked : this.colorUnchecked\n    },\n    labelChecked () {\n      return contains(this.labels, 'checked')\n        ? this.labels.checked\n        : constants.labelChecked\n    },\n    labelUnchecked () {\n      return contains(this.labels, 'unchecked')\n        ? this.labels.unchecked\n        : constants.labelUnchecked\n    }\n  },\n  watch: {\n    value (value) {\n      if (this.sync) {\n        this.toggled = !!value\n      }\n    }\n  },\n  data () {\n    return {\n      toggled: !!this.value\n    }\n  },\n  methods: {\n    toggle (event) {\n      this.toggled = !this.toggled\n      this.$emit('input', this.toggled)\n      this.$emit('change', {\n        value: this.toggled,\n        srcEvent: event\n      })\n    }\n  }\n}\n</script>\n"]}]}